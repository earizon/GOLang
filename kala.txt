# Kala Job Scheduler
* low code job scheduler
* written in Go, but multiplatform.
* Features:
  * Single binary
  * JSON over HTTP API
  * Job Stats
  * Configurable Retries
  * Scheduling with ISO 8601 Date and Interval notation
  * Dependent Jobs
  * Persistent with several database drivers
  * Web UI

* WARN: It is not battle-tested. Use at your own risk.

* Inspired by (Airbnb) Chronos. Chronos adds fault tolerance,
  distributed features, massive scale.

* Instaling:
  ```
  | $ go get github.com/ajvb/kala
  ```

* Running:
  ```
   $ kala serve \        <··· Start kala listening on port 2222 (def. 8000)
       -p 2222                - To use jobdb DDBB (default)
                                --jobdb=boltdb --boltpath=/path/to/dir
                              Alternatives include redis, Consul, Mongo,
                              PostgreSQL, MySQL/MariaDB,

   $ curl http://localhost:2222/api/v1/stats/ # test
   {
     "Stats": {
       "ActiveJobs": 2,
       "DisabledJobs": 0,
       "Jobs": 2,
       "ErrorCount": 0,
       "SuccessCount": 0,
       "NextRunAt": "2015-06-04T19:25:16.82873873-07:00",
       "LastAttemptedRun": "0001-01-01T00:00:00Z",
       "CreatedAt": "2015-06-03T19:58:21.433668791-07:00"
     }
   }
  ```

## Kala official go client [[{]]

* <https://pkg.go.dev/github.com/ajvb/kala/client>
  ```
  | kala := New("http://127.0.0.1:8000")
  | body := &job.Job{ // https://pkg.go.dev/github.com/ajvb/kala/job#Job
  |     Schedule: "R2/2015-06-04T19:25:16.828696-07:00/PT10S",
  |     Name:      "test_job",
  |     Command:  "bash -c 'date'",
  | }
  | id, err     := kala.CreateJob(body)
  | ok, err     := kala.DeleteAllJobs()
  | ok, err     := kala.DeleteJob(id)
  | ok, err     := kala.DisableJob(id)
  | ok, err     := kala.EnableJob(id)
  | jobs, err   := kala.GetAllJobs()
  | job, err    := kala.GetJob(id)
  | stats, err  := kala.GetJobStats(id)
  | stats, err  := kala.GetKalaStats()
  | ok, err     := kala.StartJob(id)
  ```
[[}]]


* Things to Note
  * If schedule is omitted, the job will run immediately.

## Job JSON Example

* Dates and time use ISO 8601 Notation
* Only "name" and "command" fields are required.
  Omitting the Schedule field will run the job immediately.
```
  {
    "name":"test_job",
    "id":"93b65499-b211-49ce-57e0-19e735cc5abd",
    "command":"bash /var/lib/example-command.sh",
    "owner":"",
    "disabled":false,
    "dependent_jobs":null,
    "parent_jobs":null,
┌·  "schedule":"R2/2015-06-04T19:25:16.828696-07:00/PT10S",
·   "retries":0,
·   "epsilon":"PT5S",
·   "success_count":0,
·   "last_success":"0001-01-01T00:00:00Z",
·   "error_count":0,
·   "last_error":"0001-01-01T00:00:00Z",
·   "last_attempted_run":"0001-01-01T00:00:00Z",
·   "next_run_at":"2015-06-04T19:25:16.828794572-07:00"
· }
·
└ R2/2015-06-04T19:25:16.828696-07:00/PT10S
  ·  └──────────────┬───────────────┘ └─┬─┘
  ·                 ·                   ·
  ·      START DATETIME. Examples       ·
  ·      2017-06-04T19:25:16            ·
  ·      2017-06-04T19:25:16.828696     ·
  ·      2017-06-04T19:25:16.828696-07:00
  ·      2017-06-04T19:25:16-07:00      ·
  ·      Best Practice: include timezone·
  ·                                     ·
  ·                                     ·
  ·                                     ·
  NUMBER OF TIMES TO REPEAT      ISO8601 Interval Notation
  R    - repeat forever          (between runs)
  R2   - repeat twice            P   - Starts the notation
  RN   - repeat N times          1Y  - One year
                                 1W  - One week
                                 2M  - Two months
                                 10D - Ten days
                                 T   - Starts the time second
                                 2H  - Two hours
                                 30M - Thirty minutes
                                 15S - Fifteen seconds
                                 "advanced" example:
                                 P1Y2M10DT2H30M15S
```

## KALA REST API

  ```
  TASK             METHOD  ROUTE
  ---------------  ------  -------------------------
  Creating a Job   POST    /api/v1/job/
  Fetch all Jobs   GET     /api/v1/job/
  Fetch  a Job     GET     /api/v1/job/{id}/
  Delete a Job     DELETE  /api/v1/job/{id}/
  Delete all Jobs  DELETE  /api/v1/job/all/
  Fetch Job        GET     /api/v1/job/stats/{id}/
  Start Job        POST    /api/v1/job/start/{id}/
  Disable Job      POST    /api/v1/job/disable/{id}/
  Enable  Job      POST    /api/v1/job/enable/{id}/
  Get app-level    GET     /api/v1/stats/
     metrics
```

### Examples:

  ```
  $ curl ${KALA_URL}/api/v1/job/
  {"jobs":{}}

  $ (
  cat << EOF
  {
    "command": "bash /var/lib/taskX.sh",
    "name": "test_job",
    "schedule": "R2/2017-06-04T19:25:16.828696-07:00/PT10S"
    "epsilon": "PT5S",
  }
  EOF
  ) | curl ${KALA_URL}/api/v1/job/ -d @-
  {"id":"93b65499-b211-49ce-57e0-19e735cc5abd"}

  $ curl ${KALA_URL}/api/v1/job/
  {
      "jobs":{
          "93b65499-b211-49ce-57e0-19e735cc5abd":{
              "id":"93b65499-b211-49ce-57e0-19e735cc5abd",
              ...
          }
      }
  }

  $ JOB_ID="93b65499-b211-49ce-57e0-19e735cc5abd"
  $ curl ${KALA_URL}/api/v1/job/${JOB_ID}/
  {
    "job": {
      "name": "test_job",
      "id": "93b65499-b211-49ce-57e0-19e735cc5abd",
      ...
    }
  }
  (delete like $ curl -X DELETE ${KALA_URL}/api/v1/job/${JOB_ID}/)

  $ curl ${KALA_URL}/api/v1/job/stats/${JOB_ID}/
  {
    "job_stats": [
      {
        "JobId": ...,
        "RanAt": "2017-06-03T20:01:53.232919459-07:00",
        "NumberOfRetries": 0,
        "Success": true,
        "ExecutionDuration": 4529133
      }
    ]
  }

  $ curl -X POST ${KALA_URL}/api/v1/job/start/${JOB_ID}/

  $ curl -X POST ${KALA_URL}/api/v1/job/disable/${JOB_ID}/
  $ curl -X POST ${KALA_URL}/api/v1/job/enable/${JOB_ID}/
  $ curl ${KALA_URL}/api/v1/stats/
  {
    "Stats": {
      "ActiveJobs": 2,
      "DisabledJobs": 0,
      "Jobs": 2,
      "ErrorCount": 0,
      "SuccessCount": 0,
      "NextRunAt": "2017-06-04T19:25:16.82873873-07:00",
      "LastAttemptedRun": "0001-01-01T00:00:00Z",
      "CreatedAt": "2017-06-03T19:58:21.433668791-07:00"
    }
  }
  ```

### Debugging Jobs

  ```
  | $ kala run "bash /var/lib/script.sh"
  | FATA[0000] Command Failed with err: exit status 1
  ```

* `kala run` run jobs "live", and shows the response on whether it was
  successful or not

### Dependent Jobs

* Dependent jobs follow a First-In-First-Out rule
* child will wait until parent job finishes.
* child will not run if its parent job does not.
* If a parent job is deleted, unless its child jobs have another
  parent, they will be deleted as well.
