# DevOps 101 [[{devops.101]]


See also: <https://raw.githubusercontent.com/fedir/go-tooling-cheat-sheet/master/go-tooling-cheat-sheet.pdf>

[[{devops.101,devops.GOPATH,devops.modules,devops.package]]
## Project Layout

  ```
  | Diagram E-R for Workspace/Git Repos/Modules/Packages
  |
  | │GLOBAL   │<·· Pointed to by ${GOPATH} (def.: ${HOME}/go)
  | │WORKSPACE│
  |   1
  |   ^                  ¹       ²                  ³
  |   └> 1<··>N │git │ 1<·>1+ │module│ 1 <·> 1+ │package│
  |             │repo│
  |
  |   ¹:  In simple projects it is ussually the case that a git
  |      repository manages a single go module 
  |      (go.mod in git root folder).
  |       For MONOREPOs, we can have different teams publishing
  |      different modules in the same repository so that each
  |      tream can track changes from other teams directly by
  |      reusing git tooling (git history, git diff, ...).
  |      In those scenanios, the git repository ussually contains
  |      each go module (each go.mod in a subfolder of the git
  |      root folder).
  |
  |   ²: A module consists of a set of packages (a set of
  |      children folders to be versioned and released
  |      together, probably by a single team.
  |      For example a module can be a micro-service or
  |      library with own release cycle.
  |      We must always avoid dependency loops between
  |      modules. Transitive dependencies must be acyclic.
  | 
  |   ³: The package is the basic unit of code-reuse (for other packages), 
  |      code compilation (go build) and code-documentation (godoc).
  |      In practice *go files IN THE SAME DIRECTORY,
  |      compiled together with `go build`.
  |      RULE OF THUMB: a different folder is a different package.
  |       A package is alse the unit of visibility.
  |      Members in a package starting with Upper Case are visible
  |      to other packages, while lower case structs, functions, ... 
  |      are visible just inside.
  |      It is not possible to make members in a package private to the
  |      same package. The idea is that **a package is small enough to be coherent**.
  |        We can still work "against" interfaces to protect from
  |      "obscure", "instable" or "moving" code in the package.
  |        When compared to well known Java, a package is similar in concept
  |      to a big class (the directory) with internal classes (the go files
  |      with interfaces, structs and functions ).
  |      [[doc_has.keypoint]]
  ```

  ```
  | DIRECTORY LAYOUT:
  | ${GOPATH}/  <·· "GLOBAL WORKSPACE for GO PROJECTS" (defaults to ${HOME}/go )
  | ·               $ go env GOPATH # <·· print effective/current value
  | ·               To fix random problems it is recommended to add next lines
  | ·               to  .bashrc/... (or ~/.bashrc or ...): 
  | ·               + export GOPATH=$(go env GOPATH)
  | ·               + export PATH=$PATH:${GOPATH}/bin #
  | ├ pkg/      <·· Root directory for modules imported / published
  | ·               ("sort of" ${HOME}/.m2 in Java/Maven)
  | ·               
  | ├ pkg/cache/download/...  <·· cache for downloaded packages as zip+go.mod+hash+lock 
  | ·
  | · ┌──────┬─·· source code for packages installed here.
  | ├ pkg/mod/github.com/pborman/uuid@v1.2.1/...
  | ├ pkg/mod/golang.org/x.image@.21.0/...
  | ├ ...                                      ┌─┬ (go.mod, go.sum, *.go, pkgA/*go,...)
  | ├ pkg/mod/golang.org/x/tools/gopls@v0.15.3/...  
  | ·         ^                                  ^
  | ·         └──────────────┬───────────────────┘
  │ ·  ┌─────────────────────┴─────────────────────┐
  | ·  $ go install golang.org/x/tools/gopls@v0.15.3 # <·· # alt 1: Isolated install(apt like install)
  | ·                                                        (works anywhere we are in the file system).
  | ·
  | ·  $ go get -u  golang.org/x/tools/gopls@v0.15.3 # <·· # alt 2: When we also want to update go.mod 
  | ·                                  ·   ·                 (works only inside a source code folder)
  | ·     ┌───┬·······················─┴───┘                 -u: update transitive mods. dependencies 
  | ·     ·   ·                                                  to newer minor or patch releases.
  | ·     v   v                                              -u=patch: update to newer patch only
  | ├ bin/gopls
  | ├ bin/grpccurl
  | ├ bin/...
  | · └─┴─ ${GOBIN} folder (def.: ${GOPATH}/bin) in which (locally) built binaries are installed.
  | ·
  | └ src/                       <·· While not mandatory after module suport (go 1.13+) it is still
  | · ·                               recomended to place source relative to  ${GOPATH}/src
  | · └ github.com/
  | · · └ user/
  | · ·   └ prj01/               <·· GIT REPO 1 (`$ go install` to build&install ALL packages in repo)
  | · ·     │                        to $GOPATH/pkg (source) and $GOPATH/bin (binaries)
  | · ·     ├ .git/
  | · ·     │
  | · ·     ├ go.mod             <·· - relative path of go module definition for git repositories with 
  | · ·     │                          a single module. (vs monorepos with N modules(go.mod) definitions
  | · ·     ·                        - go.mod was designed to be human+machine readable.
  | · ·     · ┌ go.mod (Create like: $ go mod init ) ──────────┐
  | · ·     · │ module github.com/myUser/hello  // ¹           │
  | · ·     · │                                                │
  | · ·     · │ go 1.21.10 // <·· version used to create mod   │
  | · ·     · │                                                │
  | · ·     · │ require com.comp01/x/pckA@v2.3.0             ² │
  | · ·     · │ require golang.org/x/image@0.23.0 //indirect ³ │
  | · ·     · │ require ...                                    │
  | · ·     · └────────────────────────────────────────────────┘
  | · ·     · ¹ path used to import this module
  | · ·     ·   
  | · ·     · ² line can be edited manually (discouraged) or automatically with:
  | · ·     ·   $ go get -v -t  golang.org/x/image@0.23.0 
  │ · ·     ·     ^^^^^^ 
  | · ·     ·     fail-fast if there is an error with an external dependency
  | · ·     ·      (incorrect module, version, .. ). If everything is "OK"
  | · ·     ·      `go get` will:
  │ · ·     ·      1. Update go.mod for external module dependency-tracking
  | · ·     ·      2. Download to $GOPATH/pkg/mod/
  | · ·     ·         (directly from potentially mutable sources
  | · ·     ·         or through safer GOPROXY)
  | · ·     · ³ - An direct dependency is a module directly imported 
  | · ·     ·     by our code (import in any *.go file).
  | · ·     ·     `$ go mod tidy` will detect and add it automatically 
  | · ·     ·     (if not yet done)
  | · ·     ·   - An indirect dependency is a transitive dependency in 
  | · ·     ·     3rd party modules.
  | · ·     ·
  | · ·     ├ go.sum <·· tracsk cryptographically secure hash of downloaded external mods.
  | · ·     ·
  | · ·     ├ internal/           <·· packages inside are never exposed to other modules.
  | · ·     · └ auth/util.go          Put here any "moving" or "unstable" code that is just
  | · ·     ·                         of interest our source code. Changes will never
  | · ·     ·                         break external code depending on this module.
  | · ·     ·
  | · ·     ├ hello/main.go       <·· Package `hello`  in module github.com/myUser/hello
  | · ·     ·                         Import in other projects like:
  | · ·     · hello/hello_test.go     import github.com/user/proj01/hello/hello/...
  | · ·     ·                                └····· path from $GOPATH/src ·····┘
  | · ·     └ yes/main.go         <·· Package `yes`    in module github.com/myUser/hello
  | · ·      ...
  | · └ golang.org/
  | ·   └ x/
  | ·     └ image/                <·· GIT REPO 2, external module imported like:
  | ·       .git/                     $ go get golang.org/x/image #
  | ·       go.mod
  | · bye/bye.go
  | ·
  | └ ···
  |
  |   WARN : DO NOT SYMLINK src/... TO DIRECTORIES
  ```
[[devops.101}]]

## Packages


  ```
  |        ┌───┴───┐
  |cat .../packageN/packageN.go  <··· packageN.go name is recomended(NOT MANDATORY).
  |                                   Use "packageN.go" for "main" file inside packageN/
  |package "packageN"
  |cat  .../packageN/utils.go    <··· To go compiler packageN.go and utils.go are part of the
  |package "packageN"                 same source code package. Spliting into files makes no
  |        └────┬───┘                 different to putting it all in a same "big" *go file.
  |             ·                     UpperCase types and functions are "exported" (visible
  |             ·                     outside the package), anything else is internal.
  |             ·
  |  the name "packageN" is arbitrary, and must NOT
  |  necesarely match the parent directory (but it's recommended)
  |  EXCEPT for go files containing entry functions to build
  |  RUNNABLE PROGRAMS. In that case we must declare them as
  |  package "main"
  |  By default "go build" will also create an executable with
  |  name "package" (the name of the containing directory
  |  Any NON-MAIN package is considered a "library" in conventional
  |  languages (They are NOT called 'libraries' since they are
  |  statically linked to the final executable and there is not
  |  concept of C/C++ library loader (ldd).
  |  Reminder: All Go source code is linked at compile-time.
  |            Only when linking against C/C++ libraries dyn.link is used.
  |           `$ ldd main` will output "not a dynamic executable"
  ```

* <https://github.com/tldr-pages/tldr/blob/master/pages/common/go*.md>

  ```
  |$ go get \                    <·· Add/update/adjust dependencies in go.mod
  |  github.com/user/uuid@v1.2 #       for dependency-tracking.
  |                      └─┬─┘       - NEW BEHAVIOUR (modules go v1.13+)
  |                        ·           1. Download to $GOPATH/pkg/mod/
  |                        ·              directly from potentially mutable sources
  |                        ·              or through saferGOPROXY
  |                        ·              use '$ go install' to install
  |                        ·         - OLD BEHAVIOUR (export GO111MODULE=off):
  |                        ·           1. download src to $GOPATH/src/github.com/user/uuid
  |                        ·           2. build
  |                        ·           3. install  bin to $GOPATH/bin
  |                        └········ Version is optional. Defaults to latest
  |                                  Can be used to upgrade and downgrade.
  |                                  - A commit-hash or a branch can also be used to
  |                                    fetch a given commit.
  |                                  - @none can be used to stop tracking the dependency.
  |                                    (any other dependency dependent of this dependency
  |                                     will be downgraded to a version not dependent on it)
  |
  |$ go list -m -u all         # Show all the (already tracked) dependencies:
  |                            # -m : list modules (vs packages)
  |                            # -u : (v 1.17+) add information about available upgrades.
  |                            # all: check for all dependencies in go.mod
  |                            #      (or just github.com/... for a particular one)
  |                            # -json: render output as json
  |                            # NOTE: It can takes about 1 minute while querying
  |                                    remote services.
  |
  |$ go mod why -m go.org/A/B  # Why is that a dependency?
  |
  |$ go mod tidy               # <·· Inspect imports in *.go files. [[qa,best_patterns,troubleshooting.modules]]
  |                                  1. Updates go.mod by adding missing or removing unused dependencies
  |                                  2. (try to) download all new required dependencies
  |                                  
  |
  |$ go list std               # <·· List standard packages
  |
  |                            # ------  Running Code ------ 
  |$ go run file.go            # <·· Compile+run file.go
  |         └─────┴··················> + package main  # 'main' package is mandatory
  |                                      ...
  |                                    + func main() {..} # fun. main is mandatory
  | $ go run .                 # <·· Run the package in the current directory
  | $ go run ./cmd/foo # Run the package in the ./cmd/foo directory
  |                            # ------  Install App ------ 
  |$ go install                # <··     compile+install current package
  |$ go install github.com/... # <·· get+compile+install
  |
  |$ go bug                    # <·· Open web page to start bug-report [[qa.error_control]]
  |                               <https://golang.org/cmd/go/#hdr-Start_a_bug_report>
  ```

## go env
  ```
  | $ go env                    # <·· Show all environment variables
  | $ go env GOPATH GOOS GOARCH # <·· Show a specific environment variable/s
  | $ go env -wGOBIN=some_dir   # <·· Set an environment variable
  | $ go env -uGOBIN            # <·· Unsert/Reset env.var.
  ```

## Compile, build, "deploy" and doc gen

* REF: <https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies>

  ```
  |$ go build main.go          # Compile file with main entry poiint
  |$ go build        \         # Compile all packages
  |$ go build .                # Compile package in current dir.
  |$ go build ...              # Compile packages in current dir and subdirs.
  |$ go build ./cmd/foo        # Compile package in cmd/foo dir.
  |                            # Optional flags:
  |                            #   -o name : (Optional)  Binary output (path)name
  |                            #   -a      : force rebuilt of all packages 
  |                            #   -race   : enable data race detection. [[troubleshooting.racecondition]]
  |                            #   -msan   : enable interoperation with memory sanitizer.
  |                            #   -asan   : enable interoperation with address sanitizer.
  |                            #   -v      : print the names of packages as they are compiled.
  |                            #   -work   : print  temporary work dir and do NOT remove it on exit.
  |                            #   Compiler optimizations  (go tool compile --help)
  |                            #   -gcflags="-m -m"    : print optimization decisions
  |                            #   -gcflags="all=-m"   : optimization decisions for dependencies too
  |                            #   -gcflags="all=-N -l": disable optimizations and inlining
  |
  |$ go env GOCACHE            # Check location of build cache (def: ~/.cache/go-build)
  |
  |$ go clean -n               # Remove object files and cached files.
  |                            # <https://golang.org/cmd/go/#hdr-Remove_object_files_and_cached_files>
  |                            #   -n : Print remove commands, do NOT remove anything.
  |
  |$ go clean -cache           # Delete build cache
  |$ go clean -testcache       # Delete all cached test results
  |$ go clean -modcache        # Delete the module cache:
  |                            #   WARN!!!: This deletes everything inside ${GOPATH}/go/pkg/mod/cache
  |                            #   shared by any module (not just the cache for modules realted to the
  |                            #   one we are working on, requiring potentially expensive downloads )
  |
  |                            # -------  Viewing Go Documentation ----------------
  |
  |$ go doc strings            # View simplified documentation for the strings package
  |$ go doc -all strings       # View full documentation for the strings package
  |                              <https://golang.org/cmd/go/#hdr-Show_documentation_for_package_or_symbol>
  |
  |$ go doc                    # Show documentation for current package
  |$ go doc {{encoding/json}}  # Show package doc. and exported symbols
  |                            #   -all flag: Show also doc. for symbols
  |                            #   -src flag: Show also sources
  |$ go doc -all -src \        # Show a specific symbol.
  |         {{encoding/json.Number}}
  |
  | $ go doc strings.Replace   # View documentation for the strings.Replace function
  | $ go doc sql.DB            # View documentation for the database/sql.DB type
  | $ go doc sql.DB.Query      # View documentation for the database/sql.DB.Query method
  | $ go doc -src strings.Replace # View the source code for the strings.Replace function
  | 
  |$ godoc -http=:6060         # Serv. doc for go packages on port 6060.
  |$ godoc fmt                 # Display help for package "fmt"
  |$ godoc fmt Printf          # Display help for the func. "Printf" of "fmt" package
  |$ godoc -write_index \      # Create index file
  |    -index_files=.../file
  |$  godoc -http=:6060 \      
  |    -index \
  |    -index_files=.../file   # Use the given index file to search the docs
  |
  |$ go fix {{packages}}       # Update packages to use new APIs.          [qa]
  |                            <https://golang.org/cmd/go/#hdr-Update_packages_to_use_new_APIs>
  |
  |$ go generate               # Generate Go files by running commands     [low_code]
  |                              within source files.
  |                              <https://golang.org/cmd/go/#hdr-Generate_Go_files_by_processing_source>
  |$ go mod ...                # Module maintenance
  |                              <https://golang.org/cmd/go/#hdr-Module_maintenance>
  |$ go mod init $modName      # Initialize new module in current directory
  |$ go mod download           # Download modules to local cache
  |$ go mod verify             # Verify dependencies have expected content
  |$ go mod vendor             # Copy sources of all dependencies into the vendor directory
  |                              <https://blog.gopheracademy.com/advent-2015/vendor-folder/>
  |
  |$ goimports ...             # Updates Go import lines, add missing, removing unreferenced
  |                            # <https://godoc.org/golang.org/x/tools/cmd/goimports>
  |$ goimports file.go         # Display results to STDOUT (-w to overwrite)
  |$ goimports --d file.go     # Display diffs to STDOUT (-w to overwrite input)
  |$ goimports -local \        # Set the import prefix string after 3rd-party packages
  |  package_path file.go      # (comma-separated list)
  |
  |                            ------ Pre-Commit Check: Code formatting ------ 
  |$ gofmt -s -d foo.go        # Format the foo.go file to STDOUT (-w to overwrite)
  |                            # -s : simplify the code
  |                            # -d : display diffa (vs rewritting file)
  |                            # -e : Print all (including spurious) errors
  |                            # go fmt can be use as alternative formating tool
  |$ gofmt -s -d -w .          # Recursively format everything.
  |                            <https://golang.org/cmd/gofmt/>
  |                            ------ Pre-Commit Check: Refactor Code ---------
  | gofmt -w -r 'f1 -> F1' .   # <·· Replace foo by Foo
  | gofmt -w -r 'strings.Replace(a, b, -1) -> strings.ReplaceAll(a, b)' .
  |
  |                            ------ Pre-Commit Check: Static Analysis ------ 
  |$ go vet .                  # Vet all files in the current dir. (./... for subdirs)
  |                            # -composites=false # Disable composites analyzer.
  |                            ------ Add Experimental vet analyzers ------ 
  | $ go get golang.org/x/tools/go/analysis/passes/nilness/cmd/nilness
  | $ go get golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow
  | $ go vet -vettool=$(which nilness) ./...
  | $ go test -vet=off ./...   # Disable vet checks before running any test
  |                            ------ Pre-Commit Check: Linting Code ------ 
  | $ cd /tmp && \
  |   go get golang.org/x/lint/golint # Install the linter
  | $ golint foo.go            # Lint foo.go file (. : all dir, ./...: also subdirs)


  ```

## Module versioning

  A version identifies an IMMUTABLE SNAPSHOT of a module, which may be
either a RELEASE or A PRE-RELEASE.
  ```
  | major.minor.patch-${pre_release}+${build_metadata_string}
  | ^   ^ ^   ^ ^   ^^             ^└──────────┬────────────┘
  | ·   · ·   · ·   ··             · - optional (eg: +meta, ...)
  | ·   · ·   · ·   ··             · - ignored by VCS, preserved in go.mod.
  | ·   · ·   · ·   ·└─────────────┴─··optional (eg:-pre-release,-alpha.1,-beta.2)
  | ·   · ·   · ·   ·                  If not set, go tools default to release.
  | ·   · ·   · ·   ·                  As with v0, no backwards compatibility guarantee exists
  | ·   · ·   · └───┴─··· increase after bug-fix.
  | ·   · └───┴─··· increase after compatible (feature) update (reset patch)
  | └───┴─··· increase after incompatible update (reset minor/patch)
  |           Use v0 for unstable version (not subject to compatibility requirements)
  | 
  | Examples: 
  | 
  | github.com/xxx/modA v1.2.1          // Fully tested and ready to use.
  | github.com/xxx/modB v1.2.1-beta.1   // Future in test release.
  | 
  | github.com/xxx/modC v0.0.0-2018-af..// commit pseudo-version. ¹
  |
  | ¹ No stability or well-defined API must be assumed by consumers.
  | 
  ```

[[{devops.101]]
### Module release ("publish") KEY-POINTS:

The default dependency for resolution in go tooling follows the rules:
* if modules does NOT have any realease, latest commit      in git is picked.
* if modules does     have any realease, latest release tag in git is picked.

* Once we start tagging behaviour changes and we need to we need to keep tagging:<br/>
  Untagged commits will be ignored by go tools unless the explicit pseudo-version
  is used. In practice
  * **Do not delete version tags**, release new versions with new tags.
    Otherwise builds depending on such version will fail. [[qa.101]]
  * Do not change or overwrite a version. Checksums will fail.
[[devops.101}]]


### Monorepo Keeping two versions of code in parallel.

* In a MONOREPO keeping N versions of a module in in parallel in a single
  git repository with N "children" golang modules we use the following layout:.<br/>
  ```
  | 
  | ${GOPATH}/src/ 
  | ·                            ┌──┬─ folder for ver: 0.x|1.x of pckA
  | ├ github.com/myComp/projectI/pkgA/go.mod 
  | ├ github.com/myComp/projectI/pkgA/v2/go.mod 
  | ·                            └─────┴─ folder for ver. >=v2 of pckA
  | · 
  | · ...
  ```
* If we just want to track the latest version we can simplify the layout like:
  ```
  | 
  | ${GOPATH}/src/ 
  | ·                            ┌──┬─ folder for ver: v7 of pckA
  | ├ github.com/myComp/projectI/pkgA/go.mod    ┌······┘
  | · ┌─·····························─┴────┘    · 
  | · ┌─ go.mod ────────────────────────────────v─┐
  | · │ module github.com/myComp/projectI/pkgA/v7 │
  | · │                                           │
  | · │ require  ...                              │
  | · │ ...                                       │
  ```

* Alternatively in single repos, we can just tag release commits using 
  semantic versioning for tag names.<br/>

* Keeping a single folder and version tags is simpler if v1 and v2 are 
  mostly unrelated. Probably fixed and new features  in v2 do not affect
  fixes in v1.  
* On the other side if v2 is just v1 with some breaking changes 
  probably, fixing some bug in v1 will also means fixing that
  same bug in v2. By keeping both versions in parallel we can
  create a single commit with changes in both  `pckA/myCode.go`
  and `pckA/v2/myCode.go`. <br/>
  With the single version approach we would need to fix it in v2,
  make a commit, tag v2, push the branch and then "move to"
  (git checkout) tag v1, fix with a similar patch, commit and
  push that same branch.

## Fix problems Working with "local" (in FS vs git) modules.

* This is a normal scenario if we are developping 2 modules in 
  parallel in our FS (probably N modules in MONOREPO with N modules)
  and we want to avoid a `git push` to make changes visible to
  other modules also in our file system. Specially if both modules
  are part of the same MONOREPO and we want to group related 
  changes in a single commit. To fix it we tell go to replace a
  given module path with the local repository like:
  ```
  | $ go mod edit \
  |   replace=mycomp.com/mymoduleA@v0.0.0-unpublished=../mymoduleA
  |   └────────────────────────────┬─────────────────────────────┘
  |   A line similar to next one will be added to go.mod:
  | 
  | $ cat go.mod
  | ...
  | exclude (                        <·· Exclude dependency traking
  |     golang.org/x/crypto v1.4.5  
  |     golang.org/x/text v1.6.7
  | )
  | ...
  | replace (
  |     mycomp.com/mymoduleA v0.0.0-unpublished => ../mymoduleA
  |     ...
  | )
  ```

## Module release checks:

  ```
  | $ go mod tidy            # remove any dependencies no longer necessary.
  | $ go mod verify         # check the dependencies' hashes
  | $ go test ./...          # make sure "everything" (or at least tests) is working.
  | $ git add A.go A_test.go
  | $ git add go.mod go.sum  # Add go.mod, go.sum to release commit
  | $ git commit -m "..."
  | $ git tag v0.1.0         # tag release commit following semantic versioning
  | $ git push origin v0.1.0 # "publish" to git.
  | $ go list \              # Double-check that version is available in repo.
  |   -m github.com/XX@v0.1.0
  ```

## GOPROXY (Default in Go 1.13+)

* GOPROXY can modify the download behaviour of go get/install/list ...
* By default packages are donwloaded from the default GOPROXY route:
  ```
  | GOPROXY="https://proxy.golang.org,direct" # <·· default config. Download from Google.
  |                                                 fallback to (github/others) repository.
  ```
  The proxy (by default Google-run proxy.golang.org) also
  checks against mutability of packages (the author changes the
  original code keeping the same version). [[qa]]

* To customize using first myCustomProxy.com:
  export GOPROXY="https://myCustomProxy.com,https://proxy.golang.org,direct"

To skip checksums for private modules (local development):
* Alt 1, GOPRIVATE: bypass GOPROXY and GOSUMDB. (preferred)
  ```
  | $ export GOPROXY=https://proxy.golang.org,direct    ← for public  repos
  | $ export GOPRIVATE=*.internal.mycompany.com         ← for private repos
  |                                                       bypass GOPROXY and GOSUMDB
  ```
  WARN : It also ensures that private module repositories are not "leaked" 
  through requests to a public GOPROXY server.  [[security.101]]

* Alt 2, GONOSUMDB:  including refs to private modules.
  It allows Go client to resolve both public and private mod. dependencies,
  it doesn’t enforce immutability or availability requirements for
  private modules.
* Alt 3, private GOPROXY: Used to store both public and private modules
  in on your own infrastructure:
  · Public  modules cached by proxying a public GOPROXY.
  · Private modules cached by proxying from their VCS repos.
  e.g. using Artifactory (Enterprise Universal -go modules, npm packages,
       helm charts,...- Repository Manager)
  ```
  | $ export GOPROXY="https://:@my.artifactory.server/artifactory/api/go/go
  | $ export GONOSUMDB="github.com/mycompany/*,github.com/mypersonal/*"
  ```
* Alt 4 GONOPROXY

## gops (list and diagnoes go processes)

(Similar to Java jcmd)

  ```
  |$ gops ...                  CLI tool which lists and diagnoses Go processes currently
  |                            running on your system.
  |                          <https://github.com/google/gops>
  |$ gops                      ← Print all go processes running locally
  |$ gops $PID                 ← Print more information about a process
  |$ gops tree                 ← Display process tree
  |$ gops stack $pid|$addr     ← Print current stack trace from a target program
  |$ gops memstats $pid|addr   ← Print current runtime memory statistics
  ```

## goreaload (live reload)
  ```
  |$ goreload                  Live reload utility
  |                          <https://github.com/acoshift/goreload>
  |$ goreload -b bin_path \    ← Set the name of binary file to watch (defaults to .goreload)
  |  file.go
  |$ goreload --logPrefix \    ← Set custom log prefix (defaults to goreload)
  |  $prefix file.go
  |$ goreload --all            ← Reload whenever any file changes
  ```
[[devops.101}]]

# health-go (SLA) [[{qa.SLA,devops]]
<https://github.com/hellofresh/health-go>
- Expose HTTP handler retrieving health-status of the application
- Implements some generic checkers for the following services
  [RabbitMQ,PostgreSQL,Redis,HTTP,MongoDB,MySQL,gRPC,Memcached,InfluxDB]
[[}]]

## Cross Compilation

  ```
  | $ GOOS=linux   GOARCH=amd64 go build -o=/tmp/linux_amd64/foo .
  | $ GOOS=windows GOARCH=amd64 go build -o=/tmp/windows_amd64/foo.exe .
  | $ go tool dist list # list of all supported OS/architectures
  ```
